@startuml printer

package "Data Model" #11AFAE {
  class TransactionModel {
  }

  class ShiftReportModel {
  }

  class KitchenTicketModel {
  }

}

package "Model Parser" #94FAFF {
  package "Text Parser" #00FF00 {

    enum SHPrintCommandType {
      Text,
      Icon,
      Center,
      AlignLeft,
      AlignCenter,
      Bold,
      CancelBold,
      _2XHeight,
      Cancel2XHeight,
      SetHorizontalTab,
      SetHorizontalTabSummary,
      Separator,
      Items,
      EndItems,
    }

    class PrintableUnit {
      SHPrintCommandType command
      String value
      List<PrintableUnit> unitValues
    }
  }

  abstract class AbstractModelParser{
    .. Public ..
    + List<PrintableUnit> getPrintableUnitList
    + Bitmap getPrintableBitmap
  }

  SHPrintCommandType <- PrintableUnit

  class TransactionModelParser {
  }

  class ShiftReportModelParser {
  }

  class KitchenTicketModelParser {
  }

  PrintableUnit <-- AbstractModelParser

  AbstractModelParser <|-- TransactionModelParser
  TransactionModelParser --> TransactionModel

  AbstractModelParser <|-- ShiftReportModelParser
  ShiftReportModelParser --> ShiftReportModel

  AbstractModelParser <|-- KitchenTicketModelParser
  KitchenTicketModelParser --> KitchenTicketModel
}

package "Printer Declaration" #7F99B1 {
  enum PrinterConnectType{
    USB,
    Ethernet,
    Bluetooth,
  }

  enum PrintOutputType {
    TextBase,
    Bitmap,
  }

  abstract class AbstraceConnection {
    + connect()
    + disconnect()
    + write(byte[] data)
    + read(byte[] buffer)
    + sendData(List<byte[]> data)
    + receiveData(data)
  }

  abstract class AbstractPrinter{
    .. Private ..
    - PrintOutputType printOutputType
    - PrinterSizeType printerSizeType
    - Boolean isReceiptPrinter
    - List<String> printerTags
    - PrinterConnectType connectType
    - String ethernetIP
    - Strint ehternetPort
    - String bluetoothAddress
    - String usbPort
    - Boolean isConnected
    - AbstractConnection connection

    .. Public ..
    + printSampleReceipt()
    + printReceipt(TransactionModel model)
    + printShiftReport(ShiftReportModel model)
    + printKitchenTicket(KitchenTicketModel model)
    + openDrawer()
    + buzz()
  }

  PrintOutputType <- AbstractPrinter
  AbstraceConnection <- AbstractPrinter
  AbstractPrinter -> PrinterConnectType

  TransactionModel <-- AbstractPrinter
  ShiftReportModel <-- AbstractPrinter
  KitchenTicketModel <-- AbstractPrinter

  interface PrinterParser {
    + List<byte[]> generateCommandBytes(AbstractModelParser parser, PrintOutputType printOutputType)
  }

  class EPOSParser {
  }

  class XPrinter {
    EPOSParser eposParser
  }

  class EpsonPrinter {
    EPOSParser eposParser
  }

  AbstractPrinter <|-- XPrinter
  XPrinter --> EPOSParser

  AbstractPrinter <|-- EpsonPrinter
  EpsonPrinter --> EPOSParser

  enum PrinterSizeType {
    Printer58,
    printer80,
  }

  class BitmapDrawParser {
    + static Bitmap generateReceiptBitmap(TransactionModel mdel, PrinterSizeType printerSizeType)
    + static Bitmap generateShiftReportBitmap(ShiftReportModel mdel, PrinterSizeType printerSizeType)
    + static Bitmap generateKitchenTicketBitmap(KitchenTicketModel mdel, PrinterSizeType printerSizeType)
  }

  PrinterSizeType <-- BitmapDrawParser

  PrinterParser  <|-- EPOSParser
}

class PrintManager {
  .. Public ..
  + List<AbstractPrinter> search()
  + printReceipt(TransactionModel model)
  + printShiftReport(ShiftReportModel model)
  + printKitchenTicket(KitchenTicketModel model, List<String> printerTags)
  + openDrawer()

  .. Private ..
  - List<AbstractPrinter> printerList
}

AbstractPrinter <-- PrintManager

@enduml